# Name of your application. Used to uniquely configure containers.
service: atenas

# Name of the container image.
image: kevinenv/atenas

# Setup Traefik
traefik:
  options:
    publish:
      - "443:443"
    volume:
      - "/letsencrypt/acme.json:/letsencrypt/acme.json"
  args:
    entryPoints.web.address: ":80"
    entryPoints.websecure.address: ":443"
    entryPoints.web.http.redirections.entryPoint.to: websecure
    entryPoints.web.http.redirections.entryPoint.scheme: https
    entryPoints.web.http.redirections.entrypoint.permanent: true
    certificatesResolvers.letsencrypt.acme.email: "atenas.app@gmail.com"
    certificatesResolvers.letsencrypt.acme.storage: "/letsencrypt/acme.json"
    certificatesResolvers.letsencrypt.acme.httpchallenge: true
    certificatesResolvers.letsencrypt.acme.httpchallenge.entrypoint: web

# Deploy to these servers.
servers:
  web:
    hosts:
      - 5.78.78.254
    labels:
      traefik.http.routers.atenas.entrypoints: websecure
      traefik.http.routers.atenas.rule: Host(`atenas.app`)
      traefik.http.routers.atenas.tls.certresolver: letsencrypt
    options:
  job:
    hosts:
      - 5.78.78.254
    # Or something like bin/job
    cmd: bundle exec sidekiq
    # Limit workers resources
    #
    # options:
    #   cap-add: true
    #   cpu-count: 2
    options:

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: kevinenv

  # Always use an access token rather than real password when possible.
  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .env).
# Remember to run `kamal env push` after making changes!
env:
  clear:
    HOSTNAME: atenas.app
    DB_HOST: 5.78.78.254
    RAILS_LOG_TO_STDOUT: true
    REDIS_URL: "redis://localhost:6379/0"
    WEB_CONCURRENCY: 1
  secret:
    - RAILS_MASTER_KEY
    - POSTGRES_PASSWORD
    - SIDEKIQ_USERNAME
    - SIDEKIQ_PASSWORD
    - GMAIL_SMTP_USERNAME
    - GMAIL_SMTP_PASSWORD

# Use a different ssh user than root
# ssh:
#   user: app

# Configure builder setup.
# builder:
#   args:
#     RUBY_VERSION: 3.2.0
#   secrets:
#     - GITHUB_TOKEN
#   remote:
#     arch: amd64
#     host: ssh://app@5.78.78.254

# Use accessory services (secrets come from .env).
accessories:
  db:
    image: postgres:15
    host: 5.78.78.254
    port: 5432
    env:
      clear:
        POSTGRES_USER: "atenas"
        POSTGRES_DB: "atenas_production"
      secret:
        - POSTGRES_PASSWORD
    files:
      - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
    directories:
      - data:/var/lib/postgresql/data
  redis:
    image: redis:latest
    roles:
      - web
      - job
    cmd: "redis-server"
    volumes:
      - /var/lib/redis:/data
    options:

# Configure custom arguments for Traefik
# traefik:
#   args:
#     accesslog: true
#     accesslog.format: json

# Configure a custom healthcheck (default is /up on port 3000)
# healthcheck:
#   path: /healthz
#   port: 4000

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
# asset_path: /rails/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Configure the role used to determine the primary_host. This host takes
# deploy locks, runs health checks during the deploy, and follow logs, etc.
#
# Caution: there's no support for role renaming yet, so be careful to cleanup
#          the previous role on the deployed hosts.
# primary_role: web

# Controls if we abort when see a role with no hosts. Disabling this may be
# useful for more complex deploy configurations.
#
# allow_empty_roles: false
